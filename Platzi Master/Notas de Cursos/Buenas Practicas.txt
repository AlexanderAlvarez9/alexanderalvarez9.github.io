Curso de Buenas Prácticas para Escritura de Código

2. Beneficiarios: Yo, compañeros, cliente
Considero que es la identacion, la no repeticion de codigo, el tener bien clara la informacion al momento de declarar variables, objetos, funciones y este tipo de elementos
Usar las tecnicas del equipo para escribir el codigo, el NO uso de muchos metodos de programacion que generalmente lo hacen mas largo y repetitivo
entre otros...

3. Como medir el codigo - Buena calidad?
Caracteristicas:
-Legibilidad: como leerlo (identar)
-Mantenibilidad: que tan facil es hacer que funcine a largo plazo
-Testeabilidad: que tan facil es probar que hace lo que debe hacer

4. Codigo Prolijio
El codigo debe ser claro y debe ser entendible para humanos
Usar standars, todo el codigo debe tener la misma sintaxis

Metodos de mejorar codigo:
Definir estandar
respetalo
apoyate en algun linter

5. Identificadores
Son los nombres que damos a objetos, variables y funciones

Modificar los identificadores segun vas cambiando tu codigo, para no dejar nombres sin sentido en sitios que hacen diferentes funciones

6. Codigo Modular
Modularizar, dividir el codigo en partes donde se realize unicamente la funcion o el calculo necesario, para poder identificarlas por partes

7. Codigo reutilizable
Reutilizar codigo para al momento de cambiar algo, se haga el cambio general y no tener que realizar estos cambios varias veces

8. Codigo organizado
Organizar el sistema de archivos, dejando cada archivo donde corresponde

9. Evitar el hardcoding
Declarar variables globales, o generar archivos o variables de configuracion, para al momento de cambiar valores sensibles, se haga el cambio global

10. Evitar Efectos Colaterales
Evitar usar variables globales
No modificar datos que no se encuentren dentro del scope

11. Principios SOLID -  Single Responsibility Principle

S: principio de responsabilidad unica
O: Principio de abierto o cerrado
L: Principio de sustitucion Liskov
I: principio de segregacion de interface
D: Principio de inversion de dependencias

S - Una clase debe tener un unico objetivo, o alta cohecion, todo claro y un solo funcionamiento - Ayuda a detectar fallos, ya que se sabe quien fallo

12. O - Open/Closed Principle
No eliminar funciones ya escritas y nunca desecharlas, adaptarlas a los nuevos requerimientos, siempre tratando de aplicar el primer principio de que haga una funcion unica

13. L - Liskov Substitution Principle
Cada clase debe poder usarse como la herencia de su padre, en caso de no ser asi, verificar si tiene otro tipo de relacion mas conveniente

14. I - Interface Segregation Principle
Mantener las interfazes limpias, donde cada clase logre tener una respuesta positiva, no tener funciones que siempre seran falsas o regresan exepciones

15. D - Dependency Inversion Principle
Mantener separadas las clases de bajo nivel, con las clases de alto nivel

16. Patrones de diseño: Singleton
Creacion: como se deben crear nuevas instancias de objetos
Estructurales: como se deben estructurar las clases
Comportamiento: como se deben comportar los objetos

Singleton: una clase que tenga una sola instancia en toda la aplicacion, se puede hacer limitandola dejandola privada dentro de la clase principal con una validacion anterior

16. Patron Factory - Creacional
Ayuda a crear objetos no sobrecargando informacion irrelevante u obvia

17. Command - Comportamiento
Dice como debe responder cada objeto segun donde se vaya a utilizar

18. Testing
Testing unitario - test que reportan el correcto funcionamiento del objeto
Testing de integracion - test que informan si los componentes se complementan


21. Test Driven Development
Primero hacer las pruebas y luego el codigo

22. Pull Request
Enviar nuevo codigo a un repositorio

23. Documentar
Documentar el codigo para explicar a los demas de que trata, para poder continuar el trabajo
Como se realizan las pruebas, como se lleva a produccion
Documentar dentro del codigo, debe ser expecifico y concreto

24. Tener en cuenta
-Forma en la que escribes
-Nombres de identificadores
-Diseño de Clases
-No solo se trata de codigo, es importante documentar



--Comprobar versiones de npm y actualizar
npm install -g npm@latest
ó
npm install npm -g

--Actualizar Node_js
Descargandolo de la web


4. --Iniciar un proyecto
Se recomienda la preconfiguración.
npm set init.author.email "correo"
npm set init.author.name "tu nombre"
npm set init.license “MIT”

Se puede inicializar un proyecto rápido y con la preconfiguración se creará el package.json con estas:
npm init -y


5. --Instalar dependencias
npm install "nombreDelPaquete"

npm install "paquete" --save-dev => Instala como dependencia de desarrollo
=
npm i "paquete" -D

npm i "paquete" -S => Esta dependencia hara parte del proyecto

-–save => Necesario para producción
–-save-dev => Solo para nuestro entorno de desarrollo

npm install -g "paquete" => instala forma global

npm list -g --depth 0 => lista de paquetes instalados de forma global

npm install "paquete" -O => Sera un paquete opcional

npm fund => informacion adicional del paquete, como cuando piden financiamiento


6. Instalación de dependencias con force

npm install "paquete" --dry-run => da el resultado de la instalacion PERO NO instala

npm install "paquete" -f => forza la instalacion de la pagina oficial y ultima version

npm install => instala todas las dependencias necesarias

npm install "paquete"@"version"


7. Actualizar y eliminar paquetes

npm list => info de paquetes instalados

npm outdate => informa sobre paquetes desactualizados

--dd => muestra la informacion completa por detras, de lo que normalmente NO se muestra

npm update => actualiza paquetes desactualizados

npm install "paquete"@lasted => actualiza a ultima version

npm uninstall "paquete" => Desinstala el paquete, de node_modules y del packaje.json

npm uninstall "paquete" => Desinstala el paquete unicamente de node_modules y no del json


8. Package lock y el uso los símbolos ^ y ~

- sin nada actualiza todo
^ actualiza cambios menores y parches
~ actualiza solo parches

package_lock, tiene la informacion "tambien" de lo instalado en el proyecto

10. Solución de problemas

    En caso de que nuestros archivos de node_module no estén bien instalados o tengamos una versión anterior lo que podemos hacer es lo siguiente:

npm cache clear --force
#Para verificar que verdaderamente se borro podemos usar
npm cache verify

    Uno de los errores que podemos tener es tener algún valor corrupto en node_module, o tambien que la instalación no este completa de los paquetes que hemos instalado, para ello podemos eliminar el paquete con el siguiente comando:

rm -rf node_modules  #este comando eliminar la carpeta 

    Otra alternativa para eliminar de forma segura una carpeta es instalando el siguiente paquete:

sudo npm install -g rimraf

    Ahora podemos ejecutar el siguiente comando para eliminar node_module

rimraf node_modules  


11. Seguridad

npm audit => comprobar vulnerabilidades
npm audir fix => Solucionar vulnerabilidades













